package com.messenger;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author arsalan
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    ServerSocket serverSocket;
    Socket socket;
    DataInputStream dataInputStream;
    DataOutputStream dataOutputStream;
    Thread listenThread;
    Thread recieveThread;
    Thread sendThread;
    boolean clientStatus = false, serverStatus = false;

    public Server() {
        initComponents();
        this.setBounds(80, 80, 450, 400);
        disableFields();
        error.setForeground(Color.red);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        startListening = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        conversation = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        portNo = new javax.swing.JTextField();
        error = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Instant LAN Messanger Server");
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Port Number: ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 30, 130, 30);

        startListening.setText("Start Listening");
        startListening.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startListeningActionPerformed(evt);
            }
        });
        getContentPane().add(startListening);
        startListening.setBounds(310, 30, 120, 30);

        chat.setColumns(20);
        chat.setRows(1);
        jScrollPane1.setViewportView(chat);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 330, 370, 40);

        conversation.setEditable(false);
        conversation.setColumns(20);
        conversation.setRows(5);
        conversation.setEnabled(false);
        jScrollPane2.setViewportView(conversation);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 70, 430, 260);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sendButton);
        sendButton.setBounds(380, 330, 60, 40);

        portNo.setText("1234");
        getContentPane().add(portNo);
        portNo.setBounds(140, 30, 156, 30);
        getContentPane().add(error);
        error.setBounds(20, 10, 280, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startListeningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startListeningActionPerformed
        // TODO add your handling code here:
        Runnable runable = new Runnable() {
            public void run() {
                String port = portNo.getText();
                int portNumber = 0;
                if (port.length() >= 4) {
                    try {
                        portNumber = Integer.parseInt(port);
                        if (portNumber >= 1024) {
                            error.setText("");
                            initialize(portNumber);
                            startRecieving();
                            enableFields();
                        } else {
                            error.setText(Util.WRONG_PORT);
                        }
                    } catch (Exception ex) {
                        error.setText(Util.WRONG_PORT);
                        disableFields();
                    }
                } else {
                    error.setText(Util.INVALID_PORT_LENGTH);
                    disableFields();
                }
            }
        };

        listenThread = new Thread(runable);
        listenThread.start();


    }//GEN-LAST:event_startListeningActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        Runnable runable = new Runnable() {
            public void run() {

                try {
                    // TODO add your handling code here:
                    dataOutputStream.writeUTF(chat.getText());
                    if (!serverStatus) {
                        conversation.append("\nServer: \n [" + Util.getTime() + "]  " + chat.getText());
                        serverStatus = true;
                    } else {

                        conversation.append("\n [" + Util.getTime() + "]  " + chat.getText());
                    }
                    clientStatus = false;
                    serverSocket.close();
                    chat.setText("");
                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        sendThread = new Thread(runable);
        sendThread.start();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void disableFields() {
        chat.setEnabled(false);
        sendButton.setEnabled(false);
    }

    private void enableFields() {
        chat.setEnabled(true);
        sendButton.setEnabled(true);
    }

    private void startRecieving() {
        Runnable runable = new Runnable() {
            boolean error = false;

            public void run() {
                String text = "";
                while (true && !error) {

                    try {
                        text = dataInputStream.readUTF();
                        serverStatus = false;
                        if (!clientStatus) {
                            conversation.append("\nClient: \n [" + Util.getTime() + "]  " + text);
                            clientStatus = true;
                        } else {

                            conversation.append("\n [" + Util.getTime() + "]  " + text);
                        }
                        enableFields();
                    } catch (IOException ex) {
                        conversation.append("\nClient Lost");
                        error = true;
                        disableFields();
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }
        };

        recieveThread = new Thread(runable);
        recieveThread.start();
    }

    private void initialize(final int portNumber) throws IOException {
        serverSocket = new ServerSocket(portNumber);
        socket = serverSocket.accept();
        dataInputStream = new DataInputStream(socket.getInputStream());
        dataOutputStream = new DataOutputStream(socket.getOutputStream());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced dataInputStream Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chat;
    private javax.swing.JTextArea conversation;
    private javax.swing.JLabel error;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField portNo;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton startListening;
    // End of variables declaration//GEN-END:variables
}
